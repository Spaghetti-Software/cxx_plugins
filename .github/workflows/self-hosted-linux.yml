# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push]



# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_and_test:
    # The type of runner that the job will run on
    runs-on: 
      - self-hosted 
      - ${{matrix.config.os}}
      
    name: ${{matrix.config.os}} ${{matrix.config.cc}} ${{matrix.config.build_type}}

    strategy:
      fail-fast: false
      matrix:
        config: 
#           - build_type: "Release"
#             generator: "Unix Makefiles"
#             cc: "gcc"
#             cxx: "g++"
#             os: linux
#           - build_type: "Debug"
#             generator: "Unix Makefiles"
#             cc: "gcc"
#             cxx: "g++"
#             os: linux
          - build_type: "Release"
            generator: "Unix Makefiles"
            cc: "clang"
            cxx: "clang++"
            os: Linux
            build_dir: build/linux/clang-release
          - build_type: "Debug"
            generator: "Unix Makefiles"
            cc: "clang"
            cxx: "clang++"
            os: Linux
            build_dir: build/linux/clang-debug

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    
    - name: Create build directory
      if:   matrix.config.os == 'Linux'
      run:  |
            mkdir -p ${{matrix.config.build_dir}}
    - name: Create build directory
      if:   matrix.config.os == 'Windows'
      run:  New-Item -Path '${{matrix.config.build_dir}}' -Force -ItemType directory 
    

    - name: Clear old build
      if:   matrix.config.os == 'Linux'
      run:  |
            rm -rf ${{matrix.config.build_dir}}/*
    - name: Clear old build
      if:   matrix.config.os == 'Windows'
      run:  Get-ChildItem -Path ${{matrix.config.build_dir}} -Include *.* -File -Recurse | foreach { $_.Delete()}
            

    - name: Configure cmake
      if:   matrix.config.os == 'Linux'
      run:  |
            cd ${{matrix.config.build_dir}}
            cmake ../../.. -G "${{matrix.config.generator}}" -DCMAKE_C_COMPILER=${{matrix.config.cc}} -DCMAKE_CXX_COMPILER=${{matrix.config.cxx}} -DCMAKE_BUILD_TYPE=${{matrix.config.build_type}} -DCXX_PLUGINS_BUILD_TESTS=ON
    - name: Configure cmake
      if:   matrix.config.os == 'Windows'
      run:  |
            cd ${{matrix.config.build_dir}}
            cmake ../../.. -G "${{matrix.config.generator}}" -DCXX_PLUGINS_BUILD_TESTS=ON
    

    - name: Build all
      run:  |
            cd ${{matrix.config.build_dir}}
            cmake --build . --config ${{matrix.config.build_type}} --target all
    
    # Run tests
    - name: Test
      run:  |
            cd ${{matrix.config.build_dir}}
            ctest -C ${{matrix.config.build_type}} -V
    
