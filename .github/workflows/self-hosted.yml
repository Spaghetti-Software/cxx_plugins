# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push]



# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_and_test:
    # The type of runner that the job will run on
    runs-on: 
      - self-hosted 
      - ${{matrix.config.os}}
      
    name: ${{matrix.config.os}} ${{matrix.config.arch}} ${{matrix.config.compiler}}-${{matrix.config.compiler_version}} ${{matrix.config.build_type}}

    strategy:
      fail-fast: false
      matrix:
        config:
          - os: Windows
            os_build: Windows
            arch: x86_64
            arch_build: x86_64
            compiler: Visual Studio
            compiler_version: 16
            build_type: Release
          - os: Windows
            os_build: Windows
            arch: x86_64
            arch_build: x86_64
            compiler: Visual Studio
            compiler_version: 16
            build_type: Debug
          - os: Windows
            os_build: Windows
            arch: x86
            arch_build: x86
            compiler: Visual Studio
            compiler_version: 16
            build_type: Release
          - os: Windows
            os_build: Windows
            arch: x86
            arch_build: x86
            compiler: Visual Studio
            compiler_version: 16
            build_type: Debug
          - os: Linux
            os_build: Linux
            arch: x86_64
            arch_build: x86_64
            compiler: clang
            compiler_version: 10
            compiler_libcxx: libstdc++11
            build_type: Release
            cc: clang
            cxx: clang++
          - os: Linux
            os_build: Linux
            arch: x86_64
            arch_build: x86_64
            compiler: clang
            compiler_version: 10
            compiler_libcxx: libstdc++11
            build_type: Debug
            cc: clang
            cxx: clang++
          - os: Linux
            os_build: Linux
            arch: x86_64
            arch_build: x86_64
            compiler: gcc
            compiler_version: 9
            compiler_libcxx: libstdc++11
            build_type: Release
            cc: gcc
            cxx: g++
          - os: Linux
            os_build: Linux
            arch: x86_64
            arch_build: x86_64
            compiler: gcc
            compiler_version: 9
            compiler_libcxx: libstdc++11
            build_type: Debug
            cc: gcc
            cxx: g++

    env:
      build_dir: '${{matrix.config.os}}-${{matrix.config.arch}}-${{matrix.config.compiler}}-${{matrix.config.compiler_version}}-${{matrix.config.build_type}}'
      CC: ${{matrix.config.cc}}
      CXX: ${{matrix.config.cxx}}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    
    - name: Create build directory
      if:   matrix.config.os == 'Linux'
      run:  |
            mkdir -p '${{env.build_dir}}'
    - name: Create build directory
      if:   matrix.config.os == 'Windows'
      run:  New-Item -Path '${{env.build_dir}}' -Force -ItemType directory

    - name: Conan install/update
      if: ${{ matrix.config.compiler != 'Visual Studio' }}
      working-directory:  ${{env.build_dir}}
      run: conan install .. -s arch='${{matrix.config.arch}}' -s arch_build='${{matrix.config.arch_build}}' -s compiler='${{matrix.config.compiler}}' -s compiler.version='${{matrix.config.compiler_version}}' -s compiler.libcxx='${{matrix.config.compiler_libcxx}}' -s build_type='${{matrix.config.build_type}}' --build=missing --update -o enable_tests=True
    - name: Conan install/update
      if: ${{ matrix.config.compiler == 'Visual Studio'}}
      working-directory:  ${{env.build_dir}}
      run: conan install .. -s arch='${{matrix.config.arch}}' -s arch_build='${{matrix.config.arch_build}}' -s compiler='${{matrix.config.compiler}}' -s compiler.version='${{matrix.config.compiler_version}}' -s build_type='${{matrix.config.build_type}}' --build=missing --update -o enable_tests=True
    - name: Conan build and test
      working-directory:  ${{env.build_dir}}
      run: conan build ..

    - name: Clear build
      if:   matrix.config.os == 'Linux'
      run:  |
        rm -rf '${{env.build_dir}}/*'
    - name: Clear build
      if:   matrix.config.os == 'Windows'
      run:  Get-ChildItem -Path '${{env.build_dir}}/*' -Include *.* -File -Recurse | foreach { $_.Delete()}
    



    
